name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      matrix:
        php-versions: ['8.2', '8.3']

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ matrix.php-versions }}
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, mysql, zip
        coverage: xdebug

    - name: Validate composer.json and composer.lock
      run: composer validate --strict

    - name: Cache Composer packages
      id: composer-cache
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Run test suite
      run: vendor/bin/phpunit --coverage-clover coverage.xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

    - name: Run PHPStan
      run: vendor/bin/phpstan analyse src tests --level=5

    - name: Run Psalm
      run: vendor/bin/psalm

    - name: Run PHP CodeSniffer
      run: vendor/bin/phpcs

    - name: Run PHPMD
      run: vendor/bin/phpmd src,tests text phpmd.xml

  deploy:
    needs: test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.HOSTINGER_SSH_KEY }}

    - name: Deploy to Hostinger
      run: |
        # Create a temporary directory for the deployment
        mkdir -p deploy_temp
        
        # Copy only the necessary files
        rsync -av --exclude '.git' \
              --exclude '.github' \
              --exclude 'node_modules' \
              --exclude 'vendor' \
              --exclude 'tests' \
              --exclude 'coverage.xml' \
              --exclude 'phpunit.xml' \
              --exclude '.env' \
              --exclude '.env.example' \
              --exclude '.gitignore' \
              --exclude 'README.md' \
              --exclude 'deploy_temp' \
              ./ deploy_temp/
        
        # Deploy using rsync
        rsync -avz --delete deploy_temp/ ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }}:${{ secrets.HOSTINGER_PATH }}
        
        # Run post-deployment commands
        ssh ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }} \
          "cd ${{ secrets.HOSTINGER_PATH }} && \
           composer install --no-dev --optimize-autoloader && \
           php artisan config:cache && \
           php artisan route:cache && \
           php artisan view:cache"
        
        # Clean up
        rm -rf deploy_temp 
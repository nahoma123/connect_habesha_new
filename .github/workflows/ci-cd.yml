name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

    # This workflow will run on every push to the main branch and on pull requests targeting the main branch.

jobs:
  # Job for building, testing (add tests if you have them)
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP with Composer cache
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, mysql, zip
        coverage: none # Disable Xdebug/pcov unless you run tests that need coverage
        tools: composer:v2 # Optionally specify composer version
      # Cache Composer dependencies based on composer.lock hash
      # This is simpler than using actions/cache separately for Composer
      env:
         COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Often needed for private repos via composer

    # Cache Composer vendor directory
    # Use a separate cache step for more control if needed, but setup-php often handles it well.
    # This is an alternative/complementary cache strategy to setup-php's internal one.
    - name: Cache Composer dependencies
      id: composer-cache
      uses: actions/cache@v4
      with:
        path: vendor # Cache the vendor directory
        key: ${{ runner.os }}-php-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-php-

    - name: Validate composer.json
      run: composer validate --strict

    - name: Install dependencies (use cache)
      run: composer install --prefer-dist --no-progress --no-dev --optimize-autoloader
  deploy:
    needs: build # Ensure build job completes successfully first
    runs-on: ubuntu-latest
    # Only run deployment on actual pushes to the main branch, not on PRs
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 1 # Fetch only the latest commit

    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to Hostinger using Rsync (No Deletion)
      run: |
        echo "ðŸš€ Preparing deployment..."
        mkdir -p ~/.ssh
        printf "Host %s\n  HostName %s\n  Port 65002\n  User %s\n  StrictHostKeyChecking no\n  LogLevel ERROR\n" \
          "${{ secrets.HOSTINGER_HOST }}" \
          "${{ secrets.HOSTINGER_HOST }}" \
          "${{ secrets.HOSTINGER_USER }}" > ~/.ssh/config
        chmod 600 ~/.ssh/config

        echo "ðŸš€ Starting deployment..."
        # Removed the --delete flag to prevent deleting server-only files
        # Kept necessary exclusions for files you don't want to upload from repo
        rsync -avz \
          --exclude '.git' \
          --exclude '.github' \
          --exclude 'vendor' \
          --exclude 'node_modules' \
          --exclude '.env' \
          --exclude '.gitignore' \
          --exclude 'README.md' \
          # You generally DON'T need to exclude config.php here anymore,
          # because without --delete, rsync won't remove it.
          # However, excluding it prevents accidental upload if it somehow existed locally.
          --exclude 'config.php' \
          # Add other files/dirs from your REPO you never want to upload (if any)
          # --exclude 'local_dev_stuff/' \
          -e "ssh -p 65002" \
          ./ ${{ secrets.HOSTINGER_USER }}@${{ secrets.HOSTINGER_HOST }}:${{ secrets.HOSTINGER_PATH }}

        echo "âœ… Deployment completed successfully!"